@page "/"
@inject ISongDatabase db;
@inject IUserTracker tracker;
@attribute [StreamRendering(true)]

<PageTitle>Home</PageTitle>

@if (selection is null)
{
    <p><em>Loading...</em></p>
}
else
{
<ol class="song-list">
	@foreach (var item in selection) {
		<li class="song @(item.Song.Played ? "already-played" : "")">
			<SongStar Selection="@item" />
			<a href="/song/@item.Song.Slug">
				@item.Song.Artist
				<span class="@(item.Song.Title.Length > 30 ? "long-song-name" : "")">- @item.Song.Title</span>
			</a>
		</li>
	}
</ol>
}


@code {

	private User? User;
	private SongSelection[]? selection;

	protected override void OnInitialized()
	{
		User = tracker.GetUser();
		var stars = db.ListStarredSongs(User);
		selection = db.ListSongs()
			.Select(song => new SongSelection(song) { IsStarred = stars.Contains(song) })
			.ToArray();
	}
	
}

<script>
	document.querySelectorAll("a.song-star").forEach(a =>
		a.addEventListener("click", async evt => {
			const slug = evt.target.getAttribute("data-song-slug");
			const result = await fetch(`/star/${slug}`, {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' }
			});
			const starred = await result.json();
			if (starred) {
				a.classList.remove("fa-thin");
				a.classList.add("fa-solid");
			} else {
				a.classList.remove("fa-solid");
				a.classList.add("fa-thin");
			}
			evt.preventDefault();
			return false;
		})
	);
</script>


