@page "/backstage"
@layout BackstageLayout
@inject ISongDatabase db;
@inject IJSRuntime JsRuntime

<PageTitle>Backstage</PageTitle>

<div id="dashboard">
	<div id="song-queue">
		<ol id="ol-song-queue">
			@foreach (var item in queuedSongs) {
				<li draggable="true"
				class="@GenerateSongClass(item.Song.Slug)"
				@ondragenter:preventDefault
				@ondragleave:preventDefault
				@ondragover:preventDefault
				@ondragstart="() => DragStart(item.Song.Slug)"
				@ondragenter="() => DragEnter(item.Song.Slug)"
				@ondragleave="() => DragLeave()"
				@ondragover= "() => DragOver()"
				@ondragend="() => DragEnd()"
				@ondrop="() => Drop()">
					<a id="mark-song-as-played-link"
					@onclick="async () => await Played(item.Song.Slug)">PLAYED</a>
					@item.Song.Name
					<ul class="drop">
						@foreach (var player in item.Players) {
							<li>
								@player.Key.Name
								<em>@String.Join(", ", player.Value.Select(i => i.GetDisplayName()).ToArray())</em>
							</li>
						}
					</ul>
				</li>
			}
		</ol>
	</div>
	<div id="starred-songs">
		<WhatsHot NoOfSongs="@NoOfSongs" ShowHeaders="false" />
	</div>
</div>

@code {
	[Parameter]
	public int? NoOfSongs { get; set; }

	private List<(Song Song, Dictionary<User, Instrument[]> Players)> queuedSongs = new();

	private string playedId = "";
	private string dragId = "";
	private string dropTarget = "";

	protected override void OnInitialized()
	{
		ReloadQueue();
	}

	private void ReloadQueue()
	{
		queuedSongs = db.GetQueuedSongs();
		if (NoOfSongs is not null) {
			queuedSongs = queuedSongs
			.Take((int)NoOfSongs)
			.ToList();
		}
	}

	private async Task Played(string slug)
	{
		var song = db.FindSong(slug);
		if (song == default) return;
		playedId = slug;
		song.PlayedAt = DateTime.UtcNow;
		StateHasChanged();
		await Task.Delay(500);
		db.RemoveSongFromQueue(song);
		ReloadQueue();
		playedId = "";
	}

	private void DragStart(string slug) => dragId = slug;
	private void DragEnter(string slug) => dropTarget = slug;
	private void DragLeave() { }
	private void DragOver() { }

	private void DragEnd()
	{
		dragId = "";
		dropTarget = "";
	}

	private void Drop()
	{
		if (String.IsNullOrWhiteSpace(dropTarget)) return;
		var song = db.FindSong(dragId);
		if (song == default) return;

		var songPosition = queuedSongs.IndexOf(queuedSongs.FirstOrDefault(s => s.Song.Slug == dragId));
		var newPosition  = queuedSongs.IndexOf(queuedSongs.FirstOrDefault(s => s.Song.Slug == dropTarget));
		if (songPosition <= newPosition) {
			newPosition--;
		}

		db.MoveSongToPosition(song, newPosition);

		dragId ="";
		dropTarget = "";
		ReloadQueue();
	}

	private string? GenerateSongClass(string slug)
	{
		string? hide = slug == playedId ? "hide shrink-height" : null;
		string? target = slug == dropTarget ? "drop-target" : null;
		if (hide is null && target is null) return null;
		return $"{hide} {target}".Trim();
	}

}
