@page "/backstage"
@layout BackstageLayout
@inject ISongDatabase db;
@inject IJSRuntime JsRuntime

<PageTitle>Backstage</PageTitle>

<div id="dashboard">
	<div id="song-queue">
		<ol id="ol-song-queue">
			@foreach (var item in queuedSongs) {
				<li draggable="true" class="dropzone" id="li-@item.Song.Slug"
					data-song-slug="@item.Song.Slug">
					<a class="mark-song-as-played-link" @onclick="async () => await Played(item.Song.Slug)">PLAYED</a>
					@item.Song.Name
					<ul>
						@foreach (var player in item.Players) {
							<li>
								@player.Key.Name
								<em>
									@String.Join(", ", player.Value.Select(i => i.GetDisplayName()).ToArray())
								</em>
							</li>
						}
					</ul>
				</li>
			}
		</ol>
	</div>
	<div id="starred-songs">
		<WhatsHot NoOfSongs="@NoOfSongs" ShowHeaders="false" />
	</div>
</div>

@code {
    [Parameter]
    public int? NoOfSongs { get; set; }

    private List<(Song Song, Dictionary<User, Instrument[]> Players)> queuedSongs = new();

    protected override void OnInitialized()
    {
        queuedSongs = db.GetQueuedSongs();
        if (NoOfSongs is not null) {
            queuedSongs = queuedSongs
            .Take((int)NoOfSongs)
            .ToList();
        }
	}

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var js = new GuitaraokeJsInterop(JsRuntime);
        _ = await js.InitDragAndDrop();
    }

    private async Task Played(string slug)
    {
		await BackstageEndpoints.Status(slug, true, db);
		OnInitialized();
	}

}
