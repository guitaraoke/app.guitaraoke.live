@page "/backstage"
@layout BackstageLayout
@inject ISongDatabase db;
@inject IJSRuntime JsRuntime

<PageTitle>Backstage</PageTitle>

<div id="dashboard">
	<div id="song-queue">
		<ol id="ol-song-queue">
			@foreach (var item in queuedSongs) {
				<li draggable="true" class="dropzone @(item.Song.Slug == dropTarget ? "drop-target" : null)" id="li-@item.Song.Slug"
					@ondragenter:preventDefault
					@ondragleave:preventDefault
					@ondragover:preventDefault
					@ondragstart="() => DragStart(item.Song.Slug)"
					@ondragenter="() => DragEnter(item.Song.Slug)"
					@ondragover="() => DragOver()"
					@ondragleave="() => DragLeave()"
					@ondrop="() => HandleDrop()"
					data-song-slug="@item.Song.Slug">
					<a class="mark-song-as-played-link" @onclick="() => Played(item.Song.Slug)">PLAYED</a>
					@item.Song.Name
					<ul>
						@foreach (var player in item.Players) {
							<li>
								@player.Key.Name
								<em>
									@String.Join(", ", player.Value.Select(i => i.GetDisplayName()).ToArray())
								</em>
							</li>
						}
					</ul>
				</li>
			}
		</ol>
	</div>
	<div id="starred-songs">
		<WhatsHot NoOfSongs="@NoOfSongs" ShowHeaders="false" />
	</div>
</div>

@code {
	[Parameter]
	public int? NoOfSongs { get; set; }

	private List<(Song Song, Dictionary<User, Instrument[]> Players)> queuedSongs = new();


	private string dragId = "";
	private string dropTarget = "";

	protected override void OnInitialized()
	{
		ReloadQueue();
	}

	private void ReloadQueue()
	{
		queuedSongs = db.GetQueuedSongs();
		if (NoOfSongs is not null) {
			queuedSongs = queuedSongs
			.Take((int)NoOfSongs)
			.ToList();
		}
	}

	private void Played(string slug)
	{
		var song = db.FindSong(slug);
		if (song == default) return;
		song.PlayedAt = DateTime.UtcNow;
		db.RemoveSongFromQueue(song);
		ReloadQueue();
		StateHasChanged();
	}

	private void DragStart(string slug) {
		dragId = slug;
	}

	private void DragEnter(string slug)
	{
		dropTarget = slug;
		Console.WriteLine($"Enter {dropTarget}");
		StateHasChanged();
	}

	private void DragLeave()
	{
		Console.WriteLine($"Leave {dropTarget}");
		dropTarget = "";
		StateHasChanged();
	}

	private void DragOver()
	{
		StateHasChanged();
	}

	private void HandleDrop()
	{
		if (String.IsNullOrWhiteSpace(dropTarget)) return;
		var song = db.FindSong(dragId);
		if (song == default) return;

		var songPosition = queuedSongs.IndexOf(queuedSongs.FirstOrDefault(s => s.Song.Slug == dragId));
		var newPosition = queuedSongs.IndexOf(queuedSongs.FirstOrDefault(s => s.Song.Slug == dropTarget));
		if (songPosition <= newPosition) {
			newPosition--;
		}

		db.MoveSongToPosition(song, newPosition);

		dragId ="";
		dropTarget = "";
		ReloadQueue();
	}


}
