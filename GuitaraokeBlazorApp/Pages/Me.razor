@page "/me"
@inject ISongDatabase db;
@inject IUserTracker tracker;
@inject IJSRuntime JsRuntime
@attribute [RenderModeServer]

<PageTitle>My Songs</PageTitle>

<h1>Hi @(user?.Name ?? "there")</h1>
@if (user is not null && user.Signups.Any()) {
	<p>Your Songs:</p>
	<ul class="signup-list">
		@foreach (var signup in user.Signups) {
			<li>
				<a class="fa-light fa-trash-can remove-song-button" @onclick="async () => await RemoveSong(user?.Name, signup.Key.Slug)"></a>
				<a href="song/@signup.Key.Slug">
					@signup.Key.Artist - <span>@signup.Key.Title</span>
				</a>
				<em>@InstrumentString(signup.Value)</em>
			</li>
		}
	</ul>

} else {
	<div class="no-signups-message">
		<h2>You haven't signed up to sing or play anything!</h2>
		<p>Why not pick something from the <a class="link" href="/">song list?</a></p>
	</div>
}

@code {
	private User user = new();


	protected override void OnInitialized()
	{
		user = tracker.GetUser();
	}

	private string InstrumentString(Instrument[] signupArray)
	{
		if (signupArray is null || signupArray.Length < 1) {
			return "";
		}
		string message = String.Join(", ", signupArray.Select(i => i.GetDisplayName()).ToArray());
		return message == "0" ? "" : message; 
	}

	private async Task RemoveSong(string? name, string slug)
	{
		if (name is not null) {
			bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you donâ€™t want to do this one any more?");
			if (confirmed) {
				await SongEndpoints.SignUpForSong(slug, name, Array.Empty<Instrument>(), db, tracker);
			}
		}
	}
}
